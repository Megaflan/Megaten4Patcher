@page "/dlcpatch"
@using System.IO
@using Megaten4Patcher.Services
@inject IJSRuntime JS
@layout PatcherLayout

<div class="card text-left estilo">
    <div class="card-body">
        <h2 class="m-0 text-center">Parchea tu contenido adicional</h2>
        <div class="row d-flex justify-content-center">
            <p class="col-md-9">Para saber cómo extraer el contenido adicional de tu consola, lee el siguiente tutorial: <a href="https://citra-emu.org/wiki/dumping-updates-and-dlcs/" target="_blank">Tutorial para extraer el contenido adicional [CIA]</a></p>      
        </div>
        <form name="eligeCarpeta" class="px-5">
            <div class="row d-flex justify-content-center">
                <div class="col-md-12">
                    <label>Selecciona el dump de tu contenido adicional</label><br />
                    <div class="input-group">
                        <input class="form-control" type="text" id="ruta" placeholder="Pon aquí el dump en formato .CIA" value="@fileSelected"/>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-secondary input-group-text" @onclick="ObtenerArchivo">Examinar</button>
                        </div>
                    </div>
                </div>

            </div>
            <div class="row d-flex justify-content-center">
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-12">
                            <button type="button" class="btn btn-secondary btn-block" id="patch" style="text-align: center; margin-top: 3vh;" @onclick="AplicarParche">Aplicar parche</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div class="card-footer text-muted">
        TraduSquare 2017-2022
    </div>
</div>

@functions {
    string fileSelected { get; set; }
    bool ListenerEnabled { get; set; }
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private async Task ObtenerArchivo()
    {
        JS.InvokeAsync<string>("SearchFolder");
        if (!ListenerEnabled)
        {            
            Electron.IpcMain.On("select-folder", async (args) => {
                var mainWindow = Electron.WindowManager.BrowserWindows.Last();
                var options = new ElectronNET.API.Entities.OpenDialogOptions
                {
                    Properties = new ElectronNET.API.Entities.OpenDialogProperty[] {
                        ElectronNET.API.Entities.OpenDialogProperty.openFile
                    },
                    Filters = new ElectronNET.API.Entities.FileFilter[]
                    {
                        new ElectronNET.API.Entities.FileFilter
                        {
                            Name = "CTR Installable Archive",
                            Extensions = new string[] {"cia"},
                        }
                    }
                };

                string[] files = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);
                if (files.Length > 0)
                {
                    fileSelected = files[0];
                    //Console.WriteLine("Variable fileSelected tras async: " + fileSelected);
                    //Console.WriteLine("Variable files[0] tras async: " + files[0]);
                    Electron.IpcMain.Send(mainWindow, "select-folder-reply", fileSelected);
                }                
            });
            ListenerEnabled = true;
        }
    }

    private void AplicarParche()
    {
        try
        {
            var path = Directory.GetParent(fileSelected).FullName;
            var targetPath = $"{Path.GetDirectoryName(path)}{Path.DirectorySeparatorChar}ShinMegamiTenseiIV_DLC_esp.cia";
            var options = new ModalOptions() {
                DisableBackgroundCancel = true,
                HideCloseButton = true,
            };
            var patchingModal = Modal.Show<ModalNormal>("Parcheando...", options);
            Searcher.PatchDLC(fileSelected);
            patchingModal.Close();
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalExito.Path), targetPath);
            Modal.Show<ModalExito>($"¡Parche generado con éxito!", parameters, new ModalOptions());
        }
        catch (Exception e)
        {
            Console.WriteLine($"Se ha producido un error extrayendo los archivos.\n{e.Message}\n{e.StackTrace}");
        }
    }
}