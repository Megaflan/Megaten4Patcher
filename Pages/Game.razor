@page "/gamepatch"
@using System.IO
@using Megaten4Patcher.Services
@using System.Security.Cryptography
@using Yarhl.FileSystem
@inject IJSRuntime JS
@layout PatcherLayout
@inject Services.BlazorTimer Timer


<div class="card text-left estilo">
    <div class="card-body">
        <h2 class="m-0 text-center">Parchea tu copia original de Nintendo 3DS</h2>
        <div class="row d-flex justify-content-center">
            <p class="col-md-9">Este parche es compatible con copias originales de Shin Megami Tensei IV, tanto en versión física como en versión digital. Para saber cómo conseguir un dump legítimo de tu copia, lee el siguiente tutorial: <a href="https://3ds.hacks.guide/es_ES/dumping-titles-and-game-cartridges.html#volcar-un-cartucho-de-juego-de-3ds-a-un-archivo-cia" target="_blank">Tutorial para extraer el juego [CIA]</a></p>
        </div>
        <div>
            <ul style="display: flex;align-items: center;justify-content: space-evenly;">
                <li>
                    <input class="form-check-input" type="checkbox" @bind="checkJPN" id="flexCheckVideos">
                    <label class="form-check-label" for="flexCheckVideos">
                        Usar vídeos con audio en japonés
                    </label>
                </li>
                <li>
                    <input class="form-check-input" type="checkbox" @bind="checkLayered" id="flexCheckLayered">
                    <label class="form-check-label" for="flexCheckLayered">
                        Generar LayeredFS en vez de CIA
                    </label>
                </li>
            </ul>            
        </div>
        <form name="eligeCarpeta" class="px-5">
            <div class="row d-flex justify-content-center">
                <div class="col-md-12">
                    <label>Selecciona el dump de tu copia original</label>
                    <div class="input-group">
                        <input class="form-control" type="text" id="ruta" placeholder="Pon aquí el dump en formato .CIA" value="@fileSelected"/>
                        <div class="input-group-append">
                            <button type="button" class="btn btn-secondary input-group-text" @onclick="ObtenerArchivo">Examinar</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row d-flex justify-content-center">
                <div class="col-md-12">
                    <div class="row">
                        <div class="col-md-12"><button type="button" class="btn btn-secondary btn-block" id="patch" style="text-align: center; margin-top: 3vh;" @onclick="AplicarParche">Aplicar parche</button></div>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div class="card-footer text-muted">
        TraduSquare 2017-2022
    </div>
</div>

@functions {
    IModalReference patchingModal { get; set; }
    string fileSelected { get; set; }
    bool checkJPN { get; set; }
    bool checkLayered { get; set; }
    bool ListenerEnabled { get; set; }
    bool execution { get; set; }
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    private async Task ObtenerArchivo()
    {
        JS.InvokeAsync<string>("SearchFolder");
        if (!ListenerEnabled)
        {            
            Electron.IpcMain.On("select-folder", async (args) => {
                var mainWindow = Electron.WindowManager.BrowserWindows.Last();
                var options = new ElectronNET.API.Entities.OpenDialogOptions
                {
                    Properties = new ElectronNET.API.Entities.OpenDialogProperty[] {
                        ElectronNET.API.Entities.OpenDialogProperty.openFile
                    },
                    Filters = new ElectronNET.API.Entities.FileFilter[]
                    {
                        new ElectronNET.API.Entities.FileFilter
                        {
                            Name = "CTR Installable Archive",
                            Extensions = new string[] {"cia"},
                        }
                    }
                };

                string[] files = await Electron.Dialog.ShowOpenDialogAsync(mainWindow, options);
                if (files.Length > 0)
                {
                    fileSelected = files[0];
                    Electron.IpcMain.Send(mainWindow, "select-folder-reply", fileSelected);
                }                
            });
            ListenerEnabled = true;
        }
    }

    private void Parcheo()
    {
        try
        {            
            var path = Directory.GetParent(fileSelected).FullName;
            var targetPath = $"{Path.GetDirectoryName(path)}{Path.DirectorySeparatorChar}ShinMegamiTenseiIV_esp";                     
            Searcher.PatchGame(fileSelected, checkJPN, checkLayered);
            patchingModal.Close();
            var parameters = new ModalParameters();
            if (checkLayered)
                parameters.Add(nameof(ModalExito.Path), targetPath);
            else
                parameters.Add(nameof(ModalExito.Path), $"{targetPath}.cia");                
            Modal.Show<ModalExito>($"¡Parche generado con éxito!", parameters, new ModalOptions());                           
        }
        catch (Exception e)
        {
            patchingModal.Close();
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalFallo.Error), e.Message);
            this.patchingModal = Modal.Show<ModalFallo>($"Se ha producido un error extrayendo los archivos.", parameters, new ModalOptions());
        }
    }

    async public void AplicarParche()
    {
        if (fileSelected == null)
        {
            this.patchingModal = Modal.Show<ModalNormal>("No se ha seleccionado ningún CIA.");
        }
        else
        {
            if (execution != true)
            {
                execution = true;
                var options = new ModalOptions()
                {
                    DisableBackgroundCancel = true,
                    HideCloseButton = true,
                };
                var parameters = new ModalParameters();
                parameters.Add(nameof(ModalNormal.Message), "Este proceso puede tardar varios minutos, por favor, espere...");
                this.patchingModal = Modal.Show<ModalNormal>("Parcheando...", parameters, options);
                var t = Task.Run(async delegate
                {
                    await Task.Delay(1000);
                    Parcheo();
                });
            }
        }        
    }
}